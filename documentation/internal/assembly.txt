assembly.txt
============

This file describes what you'll see in the .asm file. The assembly file
is even more verbose when using the ``-debug'' flag. Here goes:

At the top are some macros. It was easier to track bit changes by creating
these pseudo-instructions.

This is followed by variable constant definitions (var EQU #). If a
variable or constant is never referenced, it will not appear in this list.

The entire original source should appear as comments intermixed with the assembly
output created for each line. Following each source line that produces code,
you'll see the following comments:

[#] [**|==]{..} instrinsic

#  -- if compiled with debug mode, this shows the p-code element #

== -- denotes that what follows is an intrinsic, or built-in function. these
      are usually further decomposed into a series of p-code instructions.

** -- denotes that what follows is p-code. This is further translated into 
      assembly instructions.

{..}  These bits show the context in which this instruction will execute. 
      The bits are:
        u -- this instruction is executed in the normal context
        i -- this instruction is executed in the interrupt context

      Context information is tracked to make sure the temporaries are saved 
      when necessary. Any code that executed *only* in interrupt context is 
      given interrupt temporaries (_tisr#). These don't have to be saved or 
      restored, unlike normal temporaries (_t#).

After the p-code you'll see the assembly output. If the -debug flag is used, 
then a comment to the right that has the following format:

;databits-on-entry databits-needed [branchbits-on-entry branchbits-needed] pos code

databits-on-entry : This shows the state of status<irp>, status<rp1> and 
                    status<rp0> which are the bits that determine from what 
                    bank a register will be read. These are:

                    - : the state is unknown
                    i : status<irp> is clear
                    I : status<irp> is set
                    r : status<rp1> is clear
                    R : status<rp1> is set
                    s : status<rp0> is clear
                    S : status<rp0> is set

databits-needed   : This denotes any changes needed before the instruction is
                    executed as follows:

                    - : no change needed
                    i : status<irp> must be cleared
                    I : status<irp> must be set
                    r : status<rp1> must be cleared
                    R : status<rp1> must be set
                    s : status<rp0> must be cleared
                    S : status<rp0> must be set

branchbits-on-entry: This shows the state of pclath<4> and pclath<3> as 
                     follows:

                    - : unknown
                    h : pclath<4> is clear
                    H : pclath<4> is set
                    l : pclath<3> is clear
                    L : pclath<3> is set

branchbits-needed:  Shows changed needed before the instruction is executed, 
                    as follows:

                    - : no change
                    h : pclath<4> must be cleared
                    H : pclath<4> must be set
                    l : pclath<3> must be cleared
                    L : pclath<3> must be set

pos               : The byte offset of this code, MSB then LSB. Since this 
                    is the byte offset, it will be the program 
                    instruction * 2. This is used to debug the HEX file 
                    creation.

code              : The code generated, first the LSB then the MSB. Again, 
                    this is used to debug the HEX file creation.


See ``analyzer.txt'' for an explanation of all of the dead code sections.

