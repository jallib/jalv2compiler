History & Technical Information for PICJAL



History
=======
  In the beginning I purchased a MarkIII (http://www.junun.org) which is
  a small PIC based robot, and way cool. The full kit comes with a license
  for CHBasic (http://www.celestialhorizons.com). I've been programming
  for a while and have come to expect certain things from any language.
  These were *not* met by CHBasic -- the GUI is extremely clumsy & buggy
  (countless times I lost work do to crashing, and lost time tracking
  compiler bugs when my code wouldn't run). If a compilation error occured,
  the only error message was, ``Error in line x''. That's it. No
  indication of what the error is.  It also comes with a peculiar
  license key & every time one reinstalls windows (which I used to do
  every few months) a couple of days would be lost waiting for a new
  licence. Ugh!

  Since the PIC has only 30 instructions or so, I figured how hard could 
  it be to write a compiler? I chose to emulate CHBasic because it had 
  plenty of sample code available & I thought others would prefer a free 
  option.

  It had been a long time since I'd written a compiler, and my first
  attempt though passable wasn't so good -- it translated directly to
  PIC assembly which made optimizations difficult.

  Attempt two was far better. This was a two-phase compiler --
  first translate to p-code, then add a back end to translate from
  p-code to assembly. This gives *lots* of opportunities for optimization.
  This I put out for everyone under the name PICbsc.
  
  In late 2004 I was contacted by Stef Mientki who had seen PICbsc
  somewhere & thought it looked something like JAL and maybe I could
  turn it into JAL. This thought intrigued me enough that I gave it
  a shot. This is the result.

  When I was originally looking for something other than CHBasic, I did
  look to JAL, but again it didn't do everything I had come to expect.

Basic Structure
===============

  Code is composed of functions and blocks. The outermost function is the
  NULL function and contains all global variables and all statements
  that are not otherwise wrapped in other functions.

  Each function is compose of blocks. The blocks contain all of the
  local variables, allowing constructs such as

  for 5 loop
    var byte x

    ... do stuff
  end loop

  here, x only exists within the for loop.

p-code compiler:
===============

  As I said above, JAL instructions are first translated into p-code.
  The p-code described in cmd.h and operator.h. I wanted the p-code
  to be generic enough that I could write a backend to *any* processor
  so there should be no processor dependencies.

  The p-code might create or use the following: 
    _temp      : this area is used during complex expressions and is
                 created in the root block of a procedure

    _bitbucket : holds all bit types, and again is created in the root
                 block of a procedure

    _eeprom    : a constant array sized to the current eeprom
    _eeprom_base: ORG of the eeprom
    _eeprom_used: # of bytes of the eeprom used

    _code_size : size of the code area
    _stack_size: depth of the stack

p-code optimizer:
=================

  There are extensive optimizations done over the p-code. It is far
  from complete, but pretty good none the less. Here's a summary:

  1. remove unreachable code 
     The standard & ISR codepaths are followed. Any code that is deemed 
     unreachable is removed.

  2. remove unused assignments
     Any assignment to a non-volatile variable that is never used
     is discarded.

  3. convert unassigned variables
     Any non-volatile variable that is used but never assigned is
     implicitly converted to the constant 0.

  4. space is not allocated for any unused or unassigned variables

  5. fold constant expressions
     For example, 5 + 6 is reduced to 11 -- no code space is used

  6. temporary variable reduction
     For the most part I was sloppy when creating code. A simple
     assignment like this:
       a = b + c
     becomes:
       _temp = b + c
       a = _temp
     Temporary variable reduction removes this extra step

  7. identity reduction
     This looks for identities and removes them. Here is a partial
     list, the full list can be found in cmd_op.c (see cmd_op_reduction):

     (--> means replaced with, x is a variable, C is a constant)

     x = x          ; --> x
     x + 0, 0 + x   ; --> x
     x - 0          ; --> x
     0 - x          ; --> -x
     x * 0, 0 * x   ; --> 0
     x * 1, 1 * x   ; --> x
     x / 1          ; --> x
     x / 0          ; divide by 0 error
     0 / x          ; --> 0
     x % 0          ; divide by 0 error
     x % 1          ; --> 0
     x <  0         ; --> 0 if x is unsinged
     x <= 0         ; --> x == 0 if x is unsigned
     x >= 0         ; --> 1 if x is unsigned
     x >  0         ; --> x != 0 if x is unsigned
     x && 0, 0 && x ; --> 0
     x && x         ; --> !!x
     x || 0, 0 || x ; --> !!x
     x || x,        ; --> !!x
     x & 0, 0 & x   ; --> 0
     x & x          ; --> x
     x | 0, 0 | x   ; --> x
     x | x          ; --> x
     x ^ 0, 0 ^ x   ; --> x
     x ^ x          ; --> 0
     0 << x         ; --> 0
     x << 0         ; --> x
     x << C         ; --> 0 if C > # bits in x
     0 >> x         ; --> 0
     x >> 0         ; --> x
     x >> C         ; --> 0 if C > # bits in x

  8. branch reduction
     
     branch destiation is an unconditional goto
     --> change to the destination of the goto

     call destination is an unconditional return
     --> remove the call

     goto destination is an unconditional return
     --> replace the goto with a return

     goto destination is the next instruction
     --> remove the goto

     the following sequence:
         if x goto y
         else goto z
       y:...

     is changed to: 
         if !x goto z

PIC compiler
============

  The PIC compiler translates p-code to PIC assembly. It also has some
  optimizations, mainly in handling the data bits and pclath bits.

  Variables are stored LSB...MSB. This was initially done because
  some of the 16-bit values on the PIC (for example, TMR1L and TMR1H)
  are ordered this way. It also turns out that most functions work in
  this order (the exceptions are right shift and the relationals) and
  so this ordering saves an instruction when working with indirect
  values.

  Internal variables used by the PIC compiler (created when needed):
    _pic_loop : a one byte variable used for looping with
    _pic_sign : a one byte variable used for sign extension
                and a few other places where a unique one byte
                variable is needed
    _pic_temp : used when a temporary is needed. for example, a volatile
                variable cannot hold a partial result, so the operation
                is first done in _pic_temp, then moved to the volatile
                variable.
    _pic_multiplier
    _pic_multiplicand
    _pic_mresult : As expected, these are used when multipying. They
                   overlay _pic_temp
    _pic_divaccum
    _pic_divisor
    _pic_remainder
    _pic_quotient : These are used for division and also overlay _pic_temp
    _pic_stkptr   : When recursion is used, this holds the stack pointer.
                    It is initially set to the highest value in the
                    largest unused block.
    _pic_task_block: an array of two-byte entries describing the entry
                     point for the next instruction in a task
    _pic_task_active: the active task
    _pic_isr_state  : an area large enough to hold copies of
                      _pic_loop, _pic_sign, and _pic_temp
    _pic_isr_w      : W on entry to the ISR
    _pic_isr_pclath : PCLATH on entry to the ISR
    _pic_isr_status : STATUS on entry to the ISR

  Internal functions used by the PIC compiler (created when needed):
    _pic_stkpush
    _pic_stkpop   : for pushing & popping chunks of memory on the stack
    _pic_multiply : the multiplication routine. This is created to do the
                    largest multiply (for example, if you multiply two
                    one byte variables, and also multiply two four byte
                    variables, the multiple routine will be created for the
                    later
    _pic_sdivide
    _pic_divide   : signed and unsigned divide; again the function is created
                    to work on the largest types used
    _pic_memset
    _pic_memcpy
    _pic_memcmp   : helper routines
    _pic_indirect : indirect calls are made by putting the destination
                    into _pic_sign and W, then calling pic_indirect which
                    moves W into PCLATH and _pic_sign into PCL

PIC compiler -- variable allocation
===================================
  All variables on the PIC need to be preallocated. Trying to make the
  PIC stack based would cause the code size to increase dramatically.

  Variable space is reused, so in the following sequence:

  for 5 loop
    byte x
    ...
  end loop

  for 5 loop
    byte y
    ...
  end loop

  x and y will share the same space. The callstack for all procedures
  is traversed after the procedure's variables have been allocated. A
  variable keeps the highest allocated spot it gets.

  There are three allocation cases:

  1. in the normal case, all variables are allocated discretely
  2. for recursive functions, a single block that can hold all of the
     function's variables is created, and then all of the function's
     variables are allocated within this block
  3. for functions that might be called indirectly, a single block
     is allocated that can hold all of the function's parameters.
     All non-parameter variables are allocated discretely.

     Also, unlike the other cases an indirect function's variables
     are *never* reused.

PIC compiler -- indirect calls
==============================

  Indirect calls are made when functions take VOLATILE parameters. Since
  there is no way to determine which function is going to be called, or
  where its local variables are in memory, indirect calls are done as 
  follows:
    1. all parameters are moved into _pic_temp
    2. a call is made to _pic_indirect
    3. on entry the function moves all of the variables from _pic_temp
       into its local variable block
    4. on exit the function moves all returned variables back into _pic_temp
    5. the caller looks to _pic_temp for any returned values.

PIC compiler -- re-entrant functions
====================================

  Re-entrant functions are a bit of a challenge without a true stack,
  but far from impossible. A call to a re-entrant function requires three
  calls: preamble, function call, cleanup. Each re-entrant function also
  gets an implicit counter variable

  preamble:
    if (counter != 0) then
      push all local variables to the stack
    end if
    counter = counter + 1

  cleanup:
    counter = counter - 1
    if (counter != 0) then
      pop all local variables from the stack
    end if
    
  The actual calling sequence is
    call preamble
    setup parameters
    call function
    retrieve parameters
    call cleanup

PIC compiler -- task switching
==============================
  
  The PIC gives *no access* to the call stack. This puts the following
  limitations on task switching:

  1. All tasks must be started from the root task. This guarentees that
     the call stack is empty when the task is created.

  2. A task switch can only occur within the task. It cannot occur
     in a function called by a task. Again, this guarentees the
     call stack is empty.

  The task processing itself is quite simple:

  Start a task:
    1. the task's entry point is placed on the task list
    2. the initial parameters are set

  Switch a task:
    1. _pic_task_block[_pic_task_active] = address of next instruction
    2. _pic_task_active is incremented
    3. PCLATH:PCL is set to _pic_task_block[_pic_task_active]

PIC compiler -- deep calls
==========================

  The call stack on a PIC is small, either two or eight levels. If
  interrupts are used, one level must always be reserved for
  the interrupt. This can be extended by emulating call and return.

  call : push the position of the next instruction onto the stack
         goto the destination

  return : pop the stack; set PCLATH and PCL

PIC compiler -- ISR
===================

  There is very little state needed by an ISR. On entry W, STATUS, PCLATH,
  _pic_sign, _pic_loop, and _pic_temp are saved. 
  
  A jump is made to the first procedure marked ISR. At the end of this
  procedure a jump is made to the second and so on. At the end of the
  chain a jump is made to the cleanup which simply restores everything
  and executes a retfei

PIC compiler -- optimizer
=========================

  Once all of the PIC code is generated, another optimizer is invoked.

  call destination is return
  --> remove the call

  goto destination is return
  --> replace goto with return

  goto destination is the next instructions
  --> remove the goto

  branch destination is an absolute goto
  --> resolve true branch destination

  call followed by return
  --> call changed to goto

  the following sequence:
      conditional goto label1
      goto label2
    label1:

  -->
      !conditional goto label2



  STATUS<RP1:RP0> reduction
  --> The data bank bits state is tracked at each instruction. The possible
      states are set, clear, and indeterminate. A pass is made through the
      code to remove and data bank bit changes that are deemed unnecessary

  PCLATH<4:3> reduction
  --> As with the data bank bits, the PCLATH bit state is tracked at each
      instruction, with the same possible bit values : set, clear,
      indeterminate
  --> If the total image size less any PCLATH instructions is less than 2K, 
      all operations on PCLATH are removed.
  --> If the total image size less any PCLATH instructions on bit 4 is
      less than 4K, all operations on PCLATH:<4> are removed

      After the above is done, any redundant PCLATH instructions are removed.

