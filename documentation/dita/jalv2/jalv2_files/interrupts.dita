<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="d0e2328" xml:lang="en-US">
  <title>Interrupts</title>

  <body>
    <p>Syntax:</p>

    <codeblock>          PROCEDURE identifier IS PRAGMA INTERRUPT [FAST]
             <i>statement_block</i>
          END PROCEDURE</codeblock>

    <p>PRAGMA INTERRUPT tells JAL that this procedure can only be called by
    the microcontroller's interrupt processing. Any number of procedures can
    be defined as an interrupt handler. When an interrupt occurs, first the
    microprocessor state is saved, then control passes to the first procedure
    marked as an interrupt handler. Control continues to pass to each
    interrupt handler until the last, then the microprocessor state is
    restored and the interrupt ended. The programmer is responsible for
    clearing whatever bits caused the interrupt to happen. A procedure marked
    as an interrupt handler cannot be called directly from elsewhere in the
    program. Beyond that, an interrupt handler can do anything any other
    procedure can do. The order the interrupt handlers are called is
    undefined, the only guarantee is each handler will be called at each
    interrupt, and will only be called once.</p>

    <p>If an interrupt handler executes a sub-program that is also executed by
    the main body of the program, that sub-program will be marked recursive
    and incur the recursion overhead each time it is called.</p>

    <p>If FAST is declared, the interrupt handler will only save the minimum
    amount of state necessary. This must be used with great care -- although
    the microprocessor state is saved, state used internally by the compiler
    is not. As such, only a completely assembly sub-program should be used.
    Any JAL statements might invalidate the internal state of the compiler. If
    any interrupt handler is marked FAST then only one interrupt handler is
    allowed.</p>
  </body>
</topic>
