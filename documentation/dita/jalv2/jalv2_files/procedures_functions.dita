<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="d0e2135" xml:lang="en-US">
  <title>Sub-programs: Procedures and Functions</title>

  <body>
    <p>Syntax:</p>

    <codeblock>          PROCEDURE <i>identifier</i> [ '(' [VOLATILE] type { IN | OUT |
            IN OUT } <i>identifier</i>2 [',' ...] ')' IS
             <i>statement_block</i>
          END PROCEDURE</codeblock>

    <codeblock>          FUNCTION <i>identifier</i> [ '(' [VOLATILE] type { IN | OUT | IN OUT }
            <i>identifier</i>2 [',' ...] ')' RETURN type IS
             <i>statement_block</i>
          END FUNCTION</codeblock>

    <p>The only difference between a PROCEDURE and a FUNCTION, is the former
    does not return a value, while the later does. The procedure <i>identifier
    </i>exists in the block in which the procedure is defined. A new block is
    immediately opened, and all parameters exist in that block. A parameter
    marked IN will be assigned the value passed when called. A parameter
    marked OUT will assign the resulting value to parameter passed when
    called. While in a sub-program, a new keyword is introduced:</p>

    <codeblock>          RETURN [ <i>expr</i> ]</codeblock>

    <p>When executed, the sub program immediately returns. If the sub program
    is a FUNCTION, <i>expr</i> is required. If it is a PROCEDURE, <i>expr</i>
    is forbidden.</p>

    <p>A sub-program is executed simply by using its name. If parameters are
    specified in the sub-program definition, all parameters are required,
    otherwise none are allowed. A FUNCTION can be used anywhere a value is
    required (in expressions, as parameters to other sub-programs, etc). There
    is no limit to the number of parameters.</p>

    <p>JALv2 is a pass by value language. Conceptually, an IN parameter is
    read once when the sub-program enters, and an OUT parameter is written
    once when the sub-program returns. This is not always desired. For example
    if a sub-program writes a string of characters to the serial port (passed
    as parameter), only the last character written will be sent. For this case
    we need VOLATILE parameters. These are either read each time used (IN) or
    written each time assigned (OUT). This is accomplished using pseudo
    variables (see below). If the value passed is not a pseudo-variable, a
    suitable one is created.</p>

    <p>There are two ways to pass an array into a sub-program:</p>

    <codeblock>          PROCEDURE string_write (BYTE IN str[5]) IS...
          PROCEDURE string_write (BYTE IN str[]) IS...</codeblock>

    <p>The first follows the pass-by-value semantics noted above. An array
    variable of size 5, str, is allocated in the namespace of the procedure.
    Any callers must call with an array of exactly 5 bytes, which is copied
    into the local variable and used.</p>

    <p>Alternately, the second version created a flexible array. This is
    pass-by-reference which means (1) the amount of data space used for str is
    only two or three bytes, and (2) any sized array can be passed in. This is
    generally far more useful, and far less wasteful. The operator COUNT can
    be used to determine the size of the array passed in.</p>

    <p>Procedures and functions can be nested.</p>

    <p>Example:</p>

    <codeblock>          FUNCTION square_root (WORD IN n) RETURN WORD IS

             WORD result
             WORD ix

             ix = 1
             WHILE ix &lt; n LOOP
                n = n - ix
                result = result + 1
                ix = ix + 2
             END WHILE
             RETURN result

          END FUNCTION

          xx = square_root(xx)</codeblock>

    <p>Recursion is fully supported but due to the overhead it is
    discouraged.</p>
  </body>
</topic>
