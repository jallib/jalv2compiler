<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"topic.dtd">
<topic id="d0e1031" xml:lang="en-US">
  <title>Operators</title>

  <body>
    <table colsep="1" rowsep="1">
      <title>JALv2 Operators</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <tbody>
          <row>
            <entry><b>Operator</b></entry>

            <entry><b>Operation</b></entry>

            <entry><b>Result</b></entry>
          </row>

          <row>
            <entry>COUNT</entry>

            <entry>returns the number of elements in an array</entry>

            <entry>UNIVERSAL</entry>
          </row>

          <row>
            <entry>WHEREIS</entry>

            <entry>return the location of an identifier</entry>

            <entry>UNIVERSAL<sup>6</sup></entry>
          </row>

          <row>
            <entry colsep="1" rowsep="1">DEFINED</entry>

            <entry>determines if an identifier exists</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'(' expr ')â€™</entry>

            <entry>Grouping</entry>

            <entry>Result of evaluating expr</entry>
          </row>

          <row>
            <entry>'-'<sup>3</sup></entry>

            <entry>Unary - (negation)</entry>

            <entry>Same as operand</entry>
          </row>

          <row>
            <entry>'+'<sup>3</sup></entry>

            <entry>Unary + (no-op)</entry>

            <entry>Same as operand</entry>
          </row>

          <row>
            <entry>'!'</entry>

            <entry>1's complement</entry>

            <entry>Same as operand</entry>
          </row>

          <row>
            <entry>'!!'<sup>3</sup></entry>

            <entry>Logical. If the following value is 0, the result is 0,
            otherwise the result is 1</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'*'<sup>3 5</sup></entry>

            <entry>Multiplication</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'/'<sup>3 5</sup></entry>

            <entry>Division</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'%'<sup>5</sup></entry>

            <entry>Modulus division (remainder)</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'+'<sup>3</sup></entry>

            <entry>Addition</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'-'<sup>3</sup></entry>

            <entry>Subtraction</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'&lt;&lt;'</entry>

            <entry>Shift left</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'&gt;&gt;'<sup>1</sup></entry>

            <entry>Shift right</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'&lt;'<sup>3</sup></entry>

            <entry>Strictly less than</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'&lt;='<sup>3</sup></entry>

            <entry>Less or equal</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'=='<sup>4</sup></entry>

            <entry>Equality</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'!='<sup>4</sup></entry>

            <entry>Unequal</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'&gt;='<sup>3</sup></entry>

            <entry>Greater or equal</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'&gt;'<sup>3</sup></entry>

            <entry>Strictly greater than</entry>

            <entry>BIT</entry>
          </row>

          <row>
            <entry>'&amp;'</entry>

            <entry>Binary AND</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'|'</entry>

            <entry>Binary OR</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>

          <row>
            <entry>'^'</entry>

            <entry>Binary exclusive OR</entry>

            <entry>Promotion<sup>2</sup></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <p><sup>1</sup>shift right: If the left operand is signed, the shift is
    arithmetic (sign preserving). If unsigned, it is a simple binary
    shift.</p>

    <p><sup>2</sup>promotion: The promotion rules are tricky, here are the
    cases:</p>

    <ul>
      <li>If either operand is FLOAT, the result is FLOAT.</li>

      <li>If one of the operands is UNIVERSAL and the other is not, the result
      is the same as the non-UNIVERSAL operand.</li>

      <li>If both operands have the same signedness and width, the result is
      that of the operands.</li>

      <li>If both operands have the same width, and one is unsigned, the
      result is unsigned.</li>

      <li>If one operand is wider than the other, the other operand will be
      promoted to the wider type.</li>
    </ul>

    <p><sup>3</sup>These operators allow FLOAT types.</p>

    <p><sup>4</sup>Floating point numbers should never be compared for
    equality due to the imprecise way in which they are stored. Attempting to
    do so will result in a warning from the compiler. Two different operations
    which should yield an identical mathematical result may compare unequal.
    The correct way to compare two floating point numbers, say A and B, is
    `abs((A - B)/B) &lt; 1e-6' (floating point values have a nominal precision
    of 6 - 9 digits).</p>

    <p><sup>5</sup>Keep in mind that multiplication and division, even between
    integer types are very expensive operations in both code size and data
    size (see Chapter: <xref format="html" href="built_in_functions.dita"
    scope="local">Built-in Functions</xref>).</p>

    <p><sup>6</sup>The result of WHEREIS depends upon the identifier used:</p>

    <ul>
      <li>A procedure or function will return the CODE address of the entry
      point.</li>

      <li>An assembly label will return the CODE address of the label.</li>

      <li>A variable will return the DATA address of the variable.</li>

      <li>A simple constant will generate an error.</li>

      <li>A constant array depends upon the processor family:<ul>
          <li>16-bit: returns the CODE address of the data.</li>

          <li>non-16 bit: returns the CODE address of the entry point to the
          lookup function.</li>
        </ul></li>
    </ul>
  </body>
</topic>
