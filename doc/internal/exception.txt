JALv2 Exceptions
----------------

During debugging it would be nice to be able to catch some
programming errors or other odd-ball events. To this end
exceptions have been introduced into JALv2. These require
no resources if not used, and varying amounts when used.

Exceptions *do* incur various overhead! Here are some examples
and also a `how it works' explanation:

;
; start with a simple exception handler
;
procedure handler is
  pragma exception
  pin_a6 = on ; turn on fault LED
end procedure

Note: this procedure will *never* return; the microcontroller will
simply sit in a busy-wait loop. What possible good is this you
might ask? Assuming you've some sort of debugger attached, you
can look at what caused the problem. At the top of the .asm
file, the following variables should exist:

_exception_id : 1 byte
  What caused the exception. Possible values:
       1 : divide by zero
       2 : hardware stack over/underflow
       3 : software stack over/underflow
       4+: user-defined
  This value is only valid when in the exception handler. It
  may contain any value elsewhere.

_exception_file : 1 byte
  The file in which the exception occured.  At the top of the 
  .asm file, all files used by the compilation are listed with:

  ; id filename

  this is the id of the file.

_exception_line : 2 bytes
  The line number on which the exception occured

Note that hardware stack overflow can occur due to an interrupt,
in which case the line in error will be the first line of the
first interrupt called.

What is the overhead incurred by exception handling? Clearly
this depends on the particular exception. Here are some rough
ideas, assuming a 14-bit core:

  Divide by Zero
  --------------
  This is the easiest/cheapest to catch.
    6 instructions *per non-const division*
      + setup file/line before the call
    n instructions
      + determine if the dividend is zero (n is the size of the dividend)
    2 instructions
      + set _exception
    2 instructions
      + execute GOTO exception handler
    2 instructions
      + save/restore W

  Hardware Stack Overflow
  -----------------------
  This is a bit trickier. Each call will be indirect, so there's a
  fair amount of setup/cleanup involved:

    6 instructions *per call*
      + setup file/line before the call

                     

