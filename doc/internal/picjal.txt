PIC JAL
=======

JAL compiler based on the PICbsc core.

not case sensitive
'--' or ';' starts a comment. The comment continues until the end of line.


definitions
===========
  expr       : any expression
  cexpr      : constant expression. this must be able to be fully evaluated
               by the compiler.
  bexpr      : bit expression
  identifier : and identifier always begins with either a letter ('a' - 'z')
               or an underscore ('_') and is follows by zero or more
               letters, underscores, and numerals ('0'-'9'). The maximum
               length of an identier is 1023 characters.

               Identifiers beginning with '_' are reserved for use
               by the compiler.
  
built-in types
==============
SBIT   - signed,    n-bit value
BIT    - unsigned   n-bit value
SBYTE  - signed,    8-bit value
BYTE   - unsigned,  8-bit value
SWORD  - signed,   16-bit value
WORD   - unsigned, 16-bit value
SDWORD - signed,   32 bit value
DWORD  - unsigned, 32-bit value

type conversions
================
When using expressions of mixed type, the following integer promotions are 
performed (stolen directly from the C99 standard). Note below width is the
width, in bits, of an operand. Type is the combination of width + signedness.

  if both operands are the same type
    no conversion is done
  if both operands are signed
    the operand of lesser width is promoted to the operand of greater width
  if the operand that is unsigned has a greater or equal width than the signed,
    the signed operand is converted to the unsigned type
  if the operand that is signed can represent all values of the operand that
    is unsigned, 
    the unsigned operand is converted to the signed
  failing all else, both operands are converted to the unsigned integer type 
    with the same width as the signed operand
 
when used in expressions of mixed type, BIT is considered an unsigned type.

constants
=========
"A"   - single ASCII
0b... - binary
0q... - octal
0x... - hex
dd    - decimal

'_' can be used as a digit seperator

unary operators
===============
  bit  -> bit  : ! (not), !! (logical)
  byte -> byte : +,-, ! (complement?), !! (logical)

binary operators
================
  bit, bit -> bit : & | ^ !
  byte,byte-> bit : < <= == != >= >
  byte,byte-> byte: & | ^ + - * / %

precedence
==========
  '('....')'
  unary (+), unary (-), not (!), logical (!!)
  *, /, %
  +, -
  <<, >>, >, <, >=, <=, ==, !=
  &, |, ^

Note : the logical operator simply changes an expression into a
       value of 0 or 1. If x is 0, !!x is 0, if x is non 0, !!x is 1

Note2 : For the most part BIT operands are converted to the appropriate
        BYTE type, operated on, then returned to the BIT type.

program flow
============

A program is a collection of program-blocks. Each block contains zero
or more statements. These include variable and constant defintions,
variable assignments, flow control statements, procedure and function
definitions, and procedure invokation.

There is always one implied block -- the root block. This is the
outermost of all blocks. See the syntax below for examples of when
a new block is created.

Below are the available statements, grouped by catagory:

structure definition
====================
RECORD tag
  TYPE var1[, var2...]
  ...
END RECORD

variable definition
===================
Variables and constants are block-scoped. There is no guarentee that
a variable will retain its value once it goes out of scope. A variable
may either be automatic or absolute. An absolute variable is one defined
at a certain location using the ``at'' clause. An automatic variable is
one whose base is assigned by the compiler. Any variable that is not both
assigned and used and is not absolute-volatile will be optimized away. If
it is never used, all assignments to it are discarded. If it is never
assigned it takes on the constant value 0 for whatever size it is.

VAR [[volatile] type[*size]] 
  name 
  [(array size)] 
  [AT cexpr | variable : bit pos] 
  [IS variable] 
  [= expr]

CONST [type] name = cexpr

If type is not specified, SDWORD is assumed as that's how JAL currently
works. Because expressions evaluate to the largest type, this can be a
problem.

volatile     Denotes this variable can change without warning. This has
             the following effects:
               * the variable will never hold a partial result
               * if the variable is not an automatic variable and is
                 assigned *or* used, it will not be optimized away

type[*size]  is only valid if type is BYTE, SBYTE, or BIT and sets the actual
             size of the variable. For example, BYTE*2 is the same as WORD,
             SBYTE*4 is the same as SDWORD. Some folks like to save memory
             by using non-standard, yet appropriately sized variables.

             There are two different BIT semantics depending on how they're
             defined:

               * BIT x

                 This creates a variable, x, that's one bit long but
                 assignment follows boolean semantics. That is, it will
                 be 0 if assigned to 0, or 1 if assigned to anything other
                 than 0.

               * BIT x*1

                 This also creates a single bit variable that will only hold
                 a value of 0 or 1, but instead of boolean assignment,
                 bitfield assignment is used. So,

                 x = y

                 translates into

                 x = (y & 1)

             All bit values are placed into an integer array, _bitbucket,
             that is sized to the smallest integer that can hold all of the
             defined bits.

             Bitfields can be any size.

AT cexpr | variable [ : bit pos ]
             States that this variable will reside at either location cexpr,
             or will reside at the same location as variable.
             bit pos can be used only for bit type variables and is the offset
             (from 0) of the first bit.

IS variable Creates a alias. Where ever name is used it will be replaced
            with variable. The definition of name must exactly
            match the definition of variable.

(array size) is a constant expression used to create an array.
             arrays begin with 0 and end at array_size - 1
             there is no bounds checking
             variables of type BIT, SBIT and BOOLEAN cannot be arrays

variable assignment
===================
ASSIGNMENT

  var = expr

  Assign the result of expr to var.

program flow
============
IF expr THEN [block] [ELSIF expr THEN [block]] [ELSE [block]] END IF

There can any number of ELSIF clauses. At any time only one of the
blocks will be executed. A block is entered when the corresponding
expr evaluates to non-0.

WHILE expr LOOP [block] END LOOP

Repeats [block] as long as expr is non-0

FOR expr [USING var] LOOP [block] END LOOP

Repeat [block] expr times. If the USING var clause exists, the variable
will be assigned the values [expr] through 0

FOREVER LOOP [block] END LOOP

Loop over [block] indefintely.

RETURN [expr]

Immediately exit from the current procedure or function. expr
*must not* exist if in a procedure, and *must* exist in a function.

inline assembly
===============

ASM asm statement

Generate a single inline-assembly statement (see the associated inline
assembly document).

ASSEMBLER 
  [local label1[,label2,...]
  [asm statement]
  ... 
  END ASSEMBLER

procedure & functions
=====================
PROCEDURE name [( type [volatile] [in] [out] name ) IS [BEGIN] ... 
  END PROCEDURE

FUNCTION name [( type [volatile] [in] [out] name ) RETURN type 
  IS [BEGIN] ... END FUNCTION

volatile note : a volatile parameter might generate one or two
pseudo-variables.

tasks
=====

PICJAL includes a very primative co-operative multi tasking. A task is
a special-purpose procedure which differs from a normal procedure as
follows:

* Any parameters must be *in*
* A task can only be called with the START command.

A task is defined as:

TASK name [( type [volatile] in name ) IS [BEGIN] ... 
  END TASK

Tasks are managed with the following commands:

START task [ ( parameter list ) ]

  This creates a task and immediately passes control to it. Since there is
  no access to the call stack on a PIC, tasks cannot be created from within
  a function or procedure. A task can make function, procedure and intrinsic
  calls.

  A running task *cannot be* restarted because its local variable block
  is not saved during the context switch.

SUSPEND

  This immediatly releases control of the current task. Control is then
  passed to the next task in the task list. The SUSPEND command is only
  available inside a task.

pseudo-variables
================
PROCEDURE name'PUT( type IN var ) IS ... END PROCEDURE
FUNCTION  name'GET RETURN type IS ... END FUNCTION

If name is not defined elsewhere, the variable will be read only if no PUT
procedure exists, and write only if no GET procedure exists.

preprocessor
============

INCLUDE name

  The library {name} is opened and processed. When the end of the
  library is reached, parsing continues at the first statement
  after INCLUDE.

  Note: {name} must *not* contain the '.jal' extension

pragmas
=======
PRAGMA NAME xxxx 
  make sure the current file is xxxx (no .jal extension) (what possible use is
  this?)
  
PRAGMA ERROR xxxx
  display xxxx and force compilation to stop

PRAGMA TARGET CHIP xxxx
  Select the chip. xxxx is the name of the chip to select. This is
  analogous to using INCLUDE chip_xxxx

PRAGMA TARGET CLOCK cexpr
  Set the clock speed to cexpr; analogous to ``CONST target_clock = cexpr''

PRAGMA TARGET OSC XT | INTERNAL | HS
  Set the oscillator type

PRAGMA TARGET WATCHDOG ON|OFF
  Set the configuration register WDTEN

PRAGMA TARGET POWERUP ON|OFF
  Set the configuration register PWRTEN

PRAGMA TARGET PROTECTION ON|OFF
  Set the configuration register CP

PRAGMA TARGET INTERNAL_MCLR ON|OFF
  Set the configuration register MCLR

PRAGMA TARGET FUSES cexpr
  Set the configuration register to the cexpr

PRAGMA INTERRUPT
  This must only be used inside a procedure and states that this procedure
  is an interrupt entry point. The procedure will differ slightly from
  other procedures as follows:
    the procedure must take *no* parameters
    the procedure is *not* re-entrant
  Any number of procedures can be marked interrupt but the order in which
  they are called is undefined.

PRAGMA JUMP_TABLE
  This notes that a jump table follows. An attempt is made to make sure the
  following code does not cross a 256 byte boundary

PRAGMA KEEP BANK|PAGE
  This prevents bank and page optimization in assembly statements. Normally,
  the bank or page registers are not reloaded if the correct values are
  already in place. For timing loops it is necessary to do *zero* 
  optimization.

PRAGMA EEDATA
  This the beginning of data to put placed into the EEPROM. A series of 
  comma seperated cexprs follows.

The following are used by the CHIP_* definition files. By moving this
information out of the compiler it is possible to support many chips
without bloating the compiler.

PRAGMA DATA cexpr1[-cexpr2][,...]
  This informs the code generator that variables can be allocated in the
  locations cexpr1 <= # <= cexpr. If a location is shared across banks,
  it should only appear in one DATA statement otherwise multiple
  variables might be placed in the same spot.

PRAGMA CODE cexpr
  This defines the code size.

PRAGMA STACK cexpr
  This defines the stack depth.

PRAGMA EEPROM org, size
  This defines where to put EEPROM data and how much EEPROM there is.
  The assembly output will be:
    ORG org
    db  x,y,z,w

